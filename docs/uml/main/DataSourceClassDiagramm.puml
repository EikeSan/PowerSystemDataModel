@startuml
scale 2048 width
scale 768 height

note "Assuming all classes to implement \nthe abstract methods of their interfaces\n\n" as generalNotes

interface DataConnector {
{static}{abstract}DataConnector buildConnector(String json)
{abstract}Boolean validateConnection()
}

'Not yet implemented
'interface Neo4JDataConnector {
'- neo4jDriver driver
'+ Session getSession()
'+ Object runStatement(String query)
'}
'Neo4JDataConnector 	--|> DataConnector
'interface JDBCDataConnector {
'- DriverManager driverManager
'+ Connection getConnection()
'+ ResultSet runStatement(String query)
'}
'JDBCDataConnector 	--|> DataConnector

interface CSVFileConnector {
- Path path
}
CSVFileConnector 	--|> DataConnector

interface InfluxDbConnector {
- url
- databaseName
- scenarioName
+ InfluxDB getSession()
}
InfluxDbConnector --|> DataConnector

interface DataSource {
- DataConnector connector
}

interface GridDataSource {
{abstract}GridData fetchGridData()
{abstract}List<NodeModel> fetchNodes()
{abstract}List<LineModel> fetchLines()
}
GridDataSource 	--|> DataSource

'Not yet implemented
'class Neo4JGridDataSource {
'}
'Neo4JGridDataSource --|> GridDataSource
'Neo4JGridDataSource -->  Neo4JDataConnector
'class JDBCGridDataSource {
'}
'JDBCGridDataSource --|> GridDataSource

class CSVGridDataSource {
}
CSVGridDataSource ..|> GridDataSource
CSVGridDataSource ..|> CSVFileConnector

interface AssetDataSource {
{abstract}Set<EVModel> fetchEvs()
{abstract}Set<WECModel> fetchWecPlants()
{abstract}Set<...> fetch...()
}
AssetDataSource 	..|> DataSource

interface ThermalSource
ThermalSource ..|> DataSource

interface TypeDataSource {
{abstract}TypeData fetchTypeData()
{abstract}List<EVTypeModel> fetchEvTypes()
{abstract}List<...> fetch...()
}
TypeDataSource 	..|> DataSource

interface GraphicDataSource {
{abstract}GraphicData> fetchGraphicData()
{abstract}List<...> fetch...()
}
GraphicDataSource 	..|> DataSource

interface WeatherSource {
{abstract} + Map<Point, IndividualTimeSeries<WeatherValue>> getWeather\n(ClosedInterval<ZonedDateTime> timeInterval)
{abstract} + Map<Point, IndividualTimeSeries<WeatherValue>> getWeather\n(ClosedInterval<ZonedDateTime> timeInterval, Collection<Point> coordinates)
{abstract} + Optional<TimeBasedValue<WeatherValue>> getWeather\n(ZonedDateTime date, Point coordinate)
}
WeatherSource 	--|> DataSource

class InfluxDbWeatherSource {

}
InfluxDbWeatherSource --|> WeatherSource
InfluxDbWeatherSource --> InfluxDbConnector

interface WholesaleDataSource {
{abstract}WholesaleData fetchWholesaleData()
{abstract}Double getWholesale(Date)
{abstract}Boolean subscribeToWholesaleEvents(ActorRef)
}
WholesaleDataSource 	--|> DataSource

Class InputAccumulator {
+ InputAccumulator InputAccumulator(SimulationModelConfig)
+ SimulationModel> importSimulationModel()
+ SimulationModel getSimulationModel()
}
InputAccumulator --> GridDataSource
InputAccumulator --> AssetDataSource
InputAccumulator --> TypeDataSource
InputAccumulator --> GraphicDataSource
InputAccumulator --> WeatherDataSource
InputAccumulator --> WholesaleDataSource
InputAccumulator --> SimulationModel

Class SimulationModel {
+ List<GridData> gridData
+ List<AssetData> assetData
+ List<...Data> ...Data
+ WeatherDataSource weatherProvider
+ WholesaleDataSource wholesaleProvider
}

Class MainController {
+ SimulationModel loadSimulationModel()
}
MainController --> InputAccumulator
MainController --> SimulationModel




@enduml