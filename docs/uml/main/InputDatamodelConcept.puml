@startuml

abstract Class UniqueEntity {
+ uuid: UUID
}

abstract Class InputEntity
InputEntity --|> UniqueEntity

Interface Operable {
+ inOperation: Boolean
}
Operable --|> NestedEntity

abstract Class AssetInput {
- id: String
- operationTime: OperationTime
- operator: OperatorInput
}
AssetInput --|> InputEntity
AssetInput --|> Operable

abstract Class SystemParticipantInput {
- node: NodeInput
- qCharacteristics: String
}
SystemParticipantInput --|> AssetInput
SystemParticipantInput --|> HasNodes

Class OperatorInput {
+ name: String
}
OperatorInput --|> InputEntity

abstract Class ConnectorInput {
+ nodeA: NodeInput
+ nodeB: NodeInput
}
ConnectorInput --|> AssetInput
ConnectorInput --|> HasNodes

Interface Comparable

Class CharacteristicCoordinate <A extends Quantity<A>, O extends Quantity<O>> {
    - x: ComparableQuantity<A>
    - y: ComparableQuantity<O>
    + deSerialize(Int): String
    - getXFromString(String): double
    - getYFromString(String): double
}
CharacteristicCoordinate ..|> Comparable

abstract Class CharacteristicInput <A extends Quantity<A>, O extends Quantity<O>> {
    - prefix: String
    - decimalPlaces: int
    - coordinates: SortedSet<CharacteristicCoordinate>
    + deSerialize(): String
    + <<static>> buildMatchingPattern(String): Pattern
}
CharacteristicInput --|> InputEntity
CharacteristicInput "1" --* "n" CharacteristicCoordinate

Class WecCharacteristicInput {
}
WecCharacteristicInput --|> CharacteristicInput: <<bind>>A::Power,O::Dimensionless

Class EvCharacteristicInput {
}
EvCharacteristicInput --|> CharacteristicInput: <<bind>>A::Speed,O::Dimensionless

abstract Class AssetTypeInput {
+ id: String
}
AssetTypeInput --|> InputEntity

abstract Class SystemParticipantTypeInput {
- capex: ComparableQuantity<Currency> [€]
- opex: ComparableQuantity<EnergyPrice> [€/MWh]
- sRated: ComparableQuantity<Power> [kVA]
- cosphiRated: Double
}
SystemParticipantTypeInput --|> AssetTypeInput



Class BmTypeInput {
   - capex: ComparableQuantity<Currency> [€]
   - opex: ComparableQuantity<EnergyPrice> [€/MWh]
   - cosphiRated: double
   - sRated: ComparableQuantity<Power> [kVA]
   - etaConv: ComparableQuantity<Dimensionless> [%]
   - loadGradient: ComparableQuantity<DimensionlessRate> [%/h]
}
BmTypeInput --|> SystemParticipantTypeInput

Class ChpTypeInput {
    - capex: ComparableQuantity<Currency> [€]
    - opex: ComparableQuantity<EnergyPrice> [€/MWh]
    - cosphiRated: double
    - pThermal: ComparableQuantity<Power> [KW]
    - etaEl: ComparableQuantity<Dimensionless> [%]
    - etaTh: ComparableQuantity<Dimensionless> [%]
    - pOwn: ComparableQuantity<Power> [kW]
    - thermalStorage: ThermalStorageInput
 }
ChpTypeInput --|> SystemParticipantTypeInput

Class EvTypeInput {
    - capex: ComparableQuantity<Currency> [€]
    - opex: ComparableQuantity<EnergyPrice> [€/MWh]
    - cosphiRated: double
    - eStorage: ComparableQuantity<Energy> [kWh]
    - sRated: ComparableQuantity<Power> [kVA]
    - eCons: ComparableQuantity<SpecificEnergy> [kWh/km]
}
EvTypeInput --|> SystemParticipantTypeInput


Class HpTypeInput {
    - capex: ComparableQuantity<Currency> [€]
    - opex: ComparableQuantity<EnergyPrice> [€/MWh]
    - cosphiRated: double
    - sRated: ComparableQuantity<Power> [kVA]
    - pThermal: ComparableQuantity<Power> [kW]
}
HpTypeInput --|> SystemParticipantTypeInput


Class StorageTypeInput {
- capex: ComparableQuantity<Currency> [€]
- opex: ComparableQuantity<EnergyPrice> [€/MWh]
- cosphiRated: double
- sRated: ComparableQuantity<Power> [kVA]
- activePowerGradient: ComparableQuantity<DimensionlessRate>
- pMax: ComparableQuantity<Power> [kW]
- eta: ComparableQuantity<Dimensionless> [%]
- eStorage: ComparableQuantity<Energy> [kWh]
- dod: ComparableQuantity<Dimensionless> [%]
- lifeTime: ComparableQuantity<Time> [ms]
- lifeCycle: Integer
}
StorageTypeInput --|> SystemParticipantTypeInput

Class WecTypeInput {
- rotorArea: ComparableQuantity<Area> [m²]
- hubHeight: ComparableQuantity<Length> [m]
- etaConv: ComparableQuantity<Dimensionless> [%]
}
WecTypeInput --|> SystemParticipantTypeInput


Class LineTypeInput {
+ r: ComparableQuantity<SpecificResistance> (Ohm/km)
+ x: ComparableQuantity<SpecificResistance> (Ohm/km)
+ g: ComparableQuantity<SpecificConductance> (µS/km)
+ b: ComparableQuantity<SpecificConductance> (µS/km)
+ iMax: ComparableQuantity<ElectricCurrent> (A)
+ vRated: ComparableQuantity<ElectricPotential> (V)
+ olmChar: Optional<String>
}
LineTypeInput --|> AssetTypeInput

Class Transformer2WTypeInput {
+ sRated: ComparableQuantity<Power> (MVA)
+ vRatedA: ComparableQuantity<ElectricPotential> (kV)
+ vRatedB: ComparableQuantity<ElectricPotential> (kV)
+ rSc: ComparableQuantity<ElectricalResistance> (Ohm)
+ xSc: ComparableQuantity<ElectricalResistance> (Ohm)
+ gM: ComparableQuantity<ElectricalConductance> (nS)
+ bM: ComparableQuantity<ElectricalConductance> (nS)
+ dV: ComparableQuantity<Dimensionless> (%)
+ dPhi: ComparableQuantity<Angle> (Degrees)
+ tapSide: Boolean
+ tapNeutr: Integer
+ tapMin: Integer
+ tapMax: Integer
}
Transformer2WTypeInput --|> AssetTypeInput

Class Transformer3WTypeInput {
+ vRatedA: ComparableQuantity<ElectricPotential> (kV)
+ vRatedB: ComparableQuantity<ElectricPotential> (kV)
+ vRatedC: ComparableQuantity<ElectricPotential> (kV)
+ rScA: ComparableQuantity<ElectricalResistance> (Ohm)
+ rScB: ComparableQuantity<ElectricalResistance> (Ohm)
+ rScC: ComparableQuantity<ElectricalResistance> (Ohm)
+ xScA: ComparableQuantity<ElectricalResistance> (Ohm)
+ xScB: ComparableQuantity<ElectricalResistance> (Ohm)
+ xScC: ComparableQuantity<ElectricalResistance> (Ohm)
+ gM: ComparableQuantity<ElectricalConductance> (nS)
+ bM: ComparableQuantity<ElectricalConductance> (nS)
+ sRatedA: ComparableQuantity<Power> (MVA)
+ sRatedB: ComparableQuantity<Power> (MVA)
+ sRatedC: ComparableQuantity<Power> (MVA)
+ dV: ComparableQuantity<Dimensionless> (%)
+ dPhi: ComparableQuantity<Angle> (Degrees)
+ tapNeutr: Integer
+ tapMin: Integer
+ tapMax: Integer
}
Transformer3WTypeInput --|> AssetTypeInput

Class RandomLoadParameter {
+ quarterHour: Integer
+ kWd: Double
+ kSa: Double
+ kSu: Double
+ myWd: Double
+ mySa: Double
+ mySu: Double
+ sigmaWd: Double
+ sigmaSa: Double
+ sigmaSu: Double
}
RandomLoadParameter --|> InputEntity

'extractor interface information

interface NestedEntity

interface HasNodes
HasNodes --|> NestedEntity

interface HasType
HasType --|> NestedEntity

interface HasLine
HasLine --|> NestedEntity

interface HasBus
HasBus --|> NestedEntity

Class FixedFeedInInput {
- sRated: ComparableQuantity<Power> [kVA]
- cosphiRated: double
}
FixedFeedInInput --|> SystemParticipantInput

Class PvInput {
- sRated: ComparableQuantity<Power> [kVA]
- cosphiRated: double
- azimuth: ComparableQuantity<Angle> [Degrees]
- solarHeight: ComparableQuantity<Angle> [Degrees]
- etaConv: ComparableQuantity<Dimensionless> [%]
- albedo: Double
- kG: Double
- kT: Double
- marketReaction: Boolean
}
PvInput --|> SystemParticipantInput

Class WecInput{
- type: WecTypeInput
- marketReaction: Boolean
}
WecInput --|> SystemParticipantInput
WecInput --|> HasType

Class ChpInput {
- type: ChpTypeInput
- marketReaction: Boolean
}
ChpInput --|> SystemParticipantInput
ChpInput --|> HasType

Class BmInput {
- type: BmTypeInput
- sRated: ComparableQuantity<Power> [KW]
- feedInTariff: ComparableQuantity<SpecificCurrency> [€/kWh]
- marketReaction: Boolean
- costControlled: Boolean
}
BmInput --|> SystemParticipantInput
BmInput --|> HasType

Class EvInput {
- type: EvTypeInput
}
EvInput --|> SystemParticipantInput
EvInput --|> HasType

Class LoadInput {
- scenario: String
- sRated: ComparableQuantity<Power> [kVA]
- eConsAnnual: ComparableQuantity<Energy> [kWh]
- dsm: Boolean
}
LoadInput --|> SystemParticipantInput

Class StorageInput {
- type: StorageTypeInput
- behaviour: String
}
StorageInput --|> SystemParticipantInput
StorageInput --|> HasType

Class HpInput {
- type: HpTypeInput
}
HpInput --|> SystemParticipantInput
HpInput --|> HasType

Abstract Class ThermalUnitInput {
 - uuid: UUID
 - bus: ThermalBusInput
}
ThermalUnitInput --|> AssetInput
ThermalUnitInput --|> HasBus

Class ThermalBusInput {
}
ThermalBusInput --|> AssetInput

Abstract Class ThermalSinkInput {
}
ThermalSinkInput --|> ThermalUnitInput

Class ThermalHouseInput {
 - ethCapa: ComparableQuantity<HeatCapacity> [kWh / K]
 - ethLosses: ComparableQuantity<ThermalConductance> [kW / K]
}
ThermalHouseInput --|> ThermalSinkInput

Abstract Class ThermalStorageInput {
}
ThermalStorageInput --|> ThermalUnitInput

Class CylindricalStorageInput {
  - storageVolumeLvl: ComparableQuantity<Volume>
  - storageVolumeLvlMin: ComparableQuantity<Volume>
  - inletTemp: ComparableQuantity<Temperature>
  - returnTemp: ComparableQuantity<Temperature>
  - c: ComparableQuantity<SpecificHeatCapacity>
}
CylindricalStorageInput --|> ThermalStorageInput

Class MeasurementUnitInput {
+ node: NodeInput
+ vMag: Boolean [default f]
+ vAng: Boolean [default f]
+ p: Boolean [default f]
+ q: Boolean [default f]
}
MeasurementUnitInput --|> AssetInput
MeasurementUnitInput --|> HasNodes

Class NodeInput {
+ vTarget: ComparableQuantity<Dimensionless> (pU)
+ vRated: ComparableQuantity<ElectricPotential> (kV)
+ slack: Boolean
+ geoPosition: Point
+ voltLvl: VoltageLevel
+ subnet: Integer
}
NodeInput --|> AssetInput

Class EvcsInput {
???
}
EvcsInput --|> AssetInput

Class LineInput {
+ type: LineTypeInput
+ length: ComparableQuantity<Length> (km)
+ amount: Integer
+ olm: Optional<String>
+ geoPosition: LineString
}
LineInput --|> ConnectorInput
LineInput --|> HasType

Class SwitchInput {
+ closed: Boolean
}
SwitchInput --|> ConnectorInput

abstract TransformerInput {
+ tapPos: Integer
+ amount: Integer
+ autoTap: Boolean
}
TransformerInput --|> ConnectorInput

Class Transformer2WInput {
+ type: Transformer2WTypeInput
}
Transformer2WInput --|> TransformerInput
Transformer2WInput --|> HasType

Class Transformer3WInput {
+ nodeC: NodeInput
+ type: Transformer3WTypeInput
}
Transformer3WInput --|> TransformerInput

Transformer3WInput --|> HasType

abstract Class GraphicInput {
+ graphicLayer: String
+ path: LineString
}
GraphicInput --|> InputEntity

Class NodeGraphicInput {
+ node: NodeInput
+ point: Point
}
NodeGraphicInput --|> GraphicInput
NodeGraphicInput --|> HasNodes

Class LineGraphicInput {
+ line: LineInput
}
LineGraphicInput --|> GraphicInput
LineGraphicInput --|> HasLine

Interface Value

abstract Class TimeBasedValue<T extends Value>{
    + time: ZonedDateTime
    + getValue(): T
}
TimeBasedValue --|> UniqueEntity
TimeBasedValue --* Value

Class PowerValue {
    - p: ComparableQuantity<Power> [kW]
    - q: ComparableQuantity<Power> [kVA]
}
PowerValue --|> Value

Class HeatAndPowerValue {
    - heatDemand: ComparableQuantity<Power> [kW]
}
HeatAndPowerValue --|> PowerValue

Class HeatDemandValue {
    - heatDemand: ComparableQuantity<Power> [kW]
}
HeatDemandValue --|> Value

Class EnergyPriceValue {
    - price: ComparableQuantity<SpecificCurrency> [€/MWh]
}
EnergyPriceValue --|> Value

Class IrradiationValue {
    - directIrradiation: ComparableQuantity<Irradiation>
    - diffuseIrradiation: ComparableQuantity<Irradiation>
}
IrradiationValue --|> Value

Class TemperatureValue {
    - temperature: ComparableQuantity<Temperature>
}
TemperatureValue --|> Value

Class WindValue {
    - direction: ComparableQuantity<Angle>
    - velocity: ComparableQuantity<Speed>
}
WindValue --|> Value

Class WeatherValue {
  - coordinate: Point
  - irradiation: IrradiationValue
  - temperature: TemperatureValue
  - wind: WindValue
}
WeatherValue --|> Value
WeatherValue --* IrradiationValue
WeatherValue --* TemperatureValue
WeatherValue --* WindValue

Interface LoadProfileType {
}

enum PowerSystemLoadProfileType {
BL_H
G0_A
G0_M
...
}
PowerSystemLoadProfileType --|> LoadProfileType

Interface VoltageLevel {
}

enum GermanVoltageLevel {
HoeS,
HS,
MS,
NS
}
GermanVoltageLevel --|> VoltageLevel

Abstract Class TimeSeries<T extends Value> {
    + TimeBasedValue<T> getTimeBasedValue(ZonedDateTime)
    + T getValue(ZonedDateTime)
}
TimeSeries --|> UniqueEntity
TimeSeries "1" --* "n" TimeBasedValue

Class IndividualTimeSeries<T extends Value> {
    - timeToTimeBasedValue:HashMap<ZonedDateTime, TimeBasedValue<T>>
    + add(ZonedDateTime, T): void
    + add(TimeBasedValue<T>): void
    + addAll(Map<ZonedDateTime, T>): void
}
IndividualTimeSeries --|> TimeSeries

Class PowerTimeSeries {
}
PowerTimeSeries --|> IndividualTimeSeries

Class HeatDemandTimeSeries {
}
HeatDemandTimeSeries --|> IndividualTimeSeries

Class HeatAndPowerTimeSeries {
}
HeatAndPowerTimeSeries --|> IndividualTimeSeries

Abstract Class RepetitiveTimeSeries<T extends Value> {
    + calc(ZonedDateTime): T
}
RepetitiveTimeSeries --|> TimeSeries

Class LoadProfileInput {
    + profile: LoadProfileType
}
LoadProfileInput --|> RepetitiveTimeSeries
LoadProfileInput --> LoadProfileType

@enduml